---
const nav = [
  { href: "#bio", label: "Bio" },
  { href: "#experience", label: "Experience" },
  { href: "#projects", label: "Projects" },
];
---

<header class="fixed top-0 left-0 right-0 z-40 backdrop-blur bg-white/60">
  <div class="w-full px-6 h-14 flex items-center justify-between">
    <a href="/" class="font-bold text-[30px] text-[var(--stanford-black)]">
      Adrian <span class="text-[var(--stanford-cardinal)]">Molofsky</span>
    </a>

    <nav id="topnav" class="flex gap-8">
      {nav.map((n) => (
        <a
          href={n.href}
          data-scrollspy
          data-active="false"
          class="
            text-[28px]
            font-normal
            text-neutral-700
            hover:text-[var(--stanford-black)]
            transition-colors
            data-[active=true]:text-[var(--stanford-cardinal)]
          "
        >
          {n.label}
        </a>
      ))}
    </nav>
  </div>

  <!-- Inline scroll-spy + init script -->
  <script type="module">
  let _installed = false;

  function initScrollSpy() {
    if (_installed) return;
    _installed = true;

    const sections = Array.from(
      document.querySelectorAll('section[id][data-spy="section"]')
    );
    const linkMap = new Map();

    document.querySelectorAll('a[data-scrollspy]').forEach((a) => {
      const href = a.getAttribute('href') || '';
      if (href.startsWith('#')) linkMap.set(href.slice(1), a);
    });

    const setActive = (id) => {
      linkMap.forEach((a) => a.setAttribute('data-active', 'false'));
      if (id && linkMap.get(id)) linkMap.get(id).setAttribute('data-active', 'true');
    };

    const getOffsetTop = (el) => {
      let top = 0, node = el;
      while (node) {
        top += node.offsetTop || 0;
        node = node.offsetParent;
      }
      return top;
    };

    let tops = [];
    const recompute = () => {
      tops = sections.map((s) => ({ id: s.id, top: getOffsetTop(s) }));
      tops.sort((a, b) => a.top - b.top);
    };
    recompute();

    // Slightly lower focus line for bottom sections, but not too low
    const FOCUS_RATIO = 0.30;

    // Click lock so the clicked item stays active while the browser scrolls
    let lockedId = null;
    let lockedUntil = 0;
    const lockTo = (id, ms = 700) => {
      lockedId = id;
      lockedUntil = Date.now() + ms;
      setActive(id);
    };

    document.querySelectorAll('a[data-scrollspy]').forEach((a) => {
      a.addEventListener('click', () => {
        const href = a.getAttribute('href') || '';
        if (href.startsWith('#')) lockTo(href.slice(1));
      }, { passive: true });
    });

    const update = () => {
      // honor lock during smooth scroll
      if (lockedId && Date.now() < lockedUntil) {
        setActive(lockedId);
        return;
      } else if (lockedId && Date.now() >= lockedUntil) {
        lockedId = null;
      }

      const focusY = window.scrollY + window.innerHeight * FOCUS_RATIO;

      // NEW: If the focus line is still above the first section (e.g., hero area),
      // clear all highlights so nothing is active.
      if (tops.length && focusY < tops[0].top - 1) {
        setActive(null);
        return;
      }

      // Bottom clamp: if basically at the end, force the last section
      const nearBottom =
        window.scrollY + window.innerHeight >= document.documentElement.scrollHeight - 2;
      if (nearBottom && tops.length) {
        setActive(tops[tops.length - 1].id);
        return;
      }

      // Normal selection
      let currentId = undefined;
      for (const s of tops) {
        if (focusY >= s.top) currentId = s.id;
        else break;
      }
      setActive(currentId);
    };

    update();
    window.addEventListener('scroll', update, { passive: true });
    window.addEventListener('resize', () => { recompute(); update(); });

    window.addEventListener('hashchange', () => {
      const id = location.hash.replace('#', '');
      if (id) lockTo(id, 700);
      requestAnimationFrame(() => { recompute(); update(); });
    });

    window.addEventListener('load', () => { recompute(); update(); });
  }

  window.addEventListener('astro:page-load', () => initScrollSpy());
  window.addEventListener('DOMContentLoaded', () => initScrollSpy());
  initScrollSpy();
</script>
</header>